class PreLoader{static get name(){return"PreLoader"}constructor(){this.preloadData={};ModuleLoader.RegisterModule(PreLoader.name);Network.requestUrl("/out/preload.json").then(a=>{this.preloadData=JSON.parse(a);PrettyConsole.debug(PreLoader.name,this.preloadData);ModuleLoader.FinishModule(PreLoader.name)}).catch(a=>{ModuleLoader.ModuleErrored(PreLoader.name,a);PrettyConsole.error(PreLoader.name,a)})}getData(a){return this.preloadData[a]||[]}}
class Registry{constructor(){this.items={};return new Proxy(this,{get(a,b,c){return"get"===b||"set"===b?a[b]:a.items[b]},set(a,b,c){a.items[b]=c;return!0}})}get(a){return this[a]}set(a,b){this[a]=b}}class ShaderLoader{constructor(a){this.shaders=a}async LoadAll(){this.data=(await Network.loadAll(this.shaders,"/out/shader/")).map(a=>a.value)}UploadShaders(){VFS.mkdir("/shaders/");for(let a=0;a<this.shaders.length;a++)VFS.WriteFile("/shaders/"+this.shaders[a],this.data[a])}}
class VFS{static Instance=null;get raw(){return VFS.Instance}static mkdir(a){VFS.Exists(a)||VFS.Instance.mkdir(a)}static WriteFile(a,b){VFS.Instance.writeFile(a,b)}static ReadFile(a,b="utf8"){return VFS.Instance.readFile(a,{encoding:b})}static Exists(a){return VFS.Instance.analyzePath(a)?.exists??!1}}
class WasmHandler{constructor(){this.module=null;this.functions={};this.whiteList=["module","Init","UploadSize","functions"];const a=new Proxy(this,WasmHandler.getProxy());window.addEventListener("beforeunload",this.BeforeUnload.bind(a));window.addEventListener("keydown",this.SetInputHandle.bind(a));document.addEventListener("pointerlockchange",this.PointerLockChange.bind(a));return a}async Init(){canvas.addEventListener("contextmenu",a=>{a.preventDefault();a.stopPropagation();return!1});this.module=
await TuneZ({locateFile:function(a){return"/out/ws/"+a},canvas}).then(a=>a.ready);VFS.Instance=wasm.module.FS}UploadConfig(){const a=localStorage.getItem("app.config");try{JSON.parse(a),this.module._app_restore_config(a)}catch(b){}}BeforeUnload(){const a=this.shutdown;a&&a();this.app_save_config();VFS.Exists("/config.json")&&localStorage.setItem("app.config",VFS.ReadFile("/config.json"))}SetInputHandle(a){"Alt"===a.key?(document.pointerLockElement?document.exitPointerLock():canvas.requestPointerLock(),
a.preventDefault(),a.stopPropagation()):a.ctrlKey&&"g"===a.key&&(this.app_toggle_render_gui(),a.preventDefault(),a.stopPropagation())}PointerLockChange(){this.app_set_lock(!!document.pointerLockElement)}UploadSize(){this.module._app_set_dimensions(canvas.width,canvas.height)}static getProxy(){return{get:function(a,b,c){return a.whiteList.includes(b)?a[b]:a.functions[b]??a.module[`_${b}`]},set:function(a,b,c){return"module"===b?(a[b]=c,!0):!1}}}}
ModuleLoader.ModulesLoaded(["PreLoader"]).then(async()=>{const a=new WasmHandler;window.wasm=registry.wasm=a;const b=registry.shaderLoader=new ShaderLoader(preLoader.getData("shader"));await b.LoadAll();await a.Init();b.UploadShaders();ModuleLoader.FinishModule("WASM")});class App{constructor(){window.app=this}async ignite(){}finish(){canvas.width=innerWidth;canvas.height=innerHeight;window.wasm.UploadSize();registry.wasm.run()}}
ModuleLoader.OnIgnition(async()=>{window.registry=new Registry;window.canvas=$("#main-canvas");ModuleLoader.RegisterModule("WASM");window.preLoader=new PreLoader;const a=new App;ModuleLoader.callback=a.finish.bind(a);await a.ignite();ModuleLoader.FinishModule("Startup")});
